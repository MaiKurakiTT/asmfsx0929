package com.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hsd.asmfsx.db.DbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_BEAN".
*/
public class DbBeanDao extends AbstractDao<DbBean, Long> {

    public static final String TABLENAME = "DB_BEAN";

    /**
     * Properties of entity DbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property User_ID = new Property(1, Integer.class, "user_ID", false, "USER__ID");
        public final static Property User_phone = new Property(2, String.class, "user_phone", false, "USER_PHONE");
        public final static Property User_uuid = new Property(3, String.class, "user_uuid", false, "USER_UUID");
        public final static Property Student_ID = new Property(4, String.class, "student_ID", false, "STUDENT__ID");
        public final static Property User_icon = new Property(5, String.class, "user_icon", false, "USER_ICON");
        public final static Property User_nickname = new Property(6, String.class, "user_nickname", false, "USER_NICKNAME");
        public final static Property User_sex = new Property(7, String.class, "user_sex", false, "USER_SEX");
        public final static Property User_birthday = new Property(8, java.util.Date.class, "user_birthday", false, "USER_BIRTHDAY");
        public final static Property User_star = new Property(9, String.class, "user_star", false, "USER_STAR");
        public final static Property User_height = new Property(10, Integer.class, "user_height", false, "USER_HEIGHT");
        public final static Property User_sign = new Property(11, String.class, "user_sign", false, "USER_SIGN");
        public final static Property User_education = new Property(12, String.class, "user_education", false, "USER_EDUCATION");
        public final static Property User_department = new Property(13, String.class, "user_department", false, "USER_DEPARTMENT");
        public final static Property User_locality = new Property(14, String.class, "user_locality", false, "USER_LOCALITY");
        public final static Property User_school = new Property(15, String.class, "user_school", false, "USER_SCHOOL");
        public final static Property User_state = new Property(16, String.class, "user_state", false, "USER_STATE");
        public final static Property User_registerDate = new Property(17, String.class, "user_registerDate", false, "USER_REGISTER_DATE");
    }


    public DbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbId
                "\"USER__ID\" INTEGER," + // 1: user_ID
                "\"USER_PHONE\" TEXT," + // 2: user_phone
                "\"USER_UUID\" TEXT," + // 3: user_uuid
                "\"STUDENT__ID\" TEXT," + // 4: student_ID
                "\"USER_ICON\" TEXT," + // 5: user_icon
                "\"USER_NICKNAME\" TEXT," + // 6: user_nickname
                "\"USER_SEX\" TEXT," + // 7: user_sex
                "\"USER_BIRTHDAY\" INTEGER," + // 8: user_birthday
                "\"USER_STAR\" TEXT," + // 9: user_star
                "\"USER_HEIGHT\" INTEGER," + // 10: user_height
                "\"USER_SIGN\" TEXT," + // 11: user_sign
                "\"USER_EDUCATION\" TEXT," + // 12: user_education
                "\"USER_DEPARTMENT\" TEXT," + // 13: user_department
                "\"USER_LOCALITY\" TEXT," + // 14: user_locality
                "\"USER_SCHOOL\" TEXT," + // 15: user_school
                "\"USER_STATE\" TEXT," + // 16: user_state
                "\"USER_REGISTER_DATE\" TEXT);"); // 17: user_registerDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbBean entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        Integer user_ID = entity.getUser_ID();
        if (user_ID != null) {
            stmt.bindLong(2, user_ID);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(3, user_phone);
        }
 
        String user_uuid = entity.getUser_uuid();
        if (user_uuid != null) {
            stmt.bindString(4, user_uuid);
        }
 
        String student_ID = entity.getStudent_ID();
        if (student_ID != null) {
            stmt.bindString(5, student_ID);
        }
 
        String user_icon = entity.getUser_icon();
        if (user_icon != null) {
            stmt.bindString(6, user_icon);
        }
 
        String user_nickname = entity.getUser_nickname();
        if (user_nickname != null) {
            stmt.bindString(7, user_nickname);
        }
 
        String user_sex = entity.getUser_sex();
        if (user_sex != null) {
            stmt.bindString(8, user_sex);
        }
 
        java.util.Date user_birthday = entity.getUser_birthday();
        if (user_birthday != null) {
            stmt.bindLong(9, user_birthday.getTime());
        }
 
        String user_star = entity.getUser_star();
        if (user_star != null) {
            stmt.bindString(10, user_star);
        }
 
        Integer user_height = entity.getUser_height();
        if (user_height != null) {
            stmt.bindLong(11, user_height);
        }
 
        String user_sign = entity.getUser_sign();
        if (user_sign != null) {
            stmt.bindString(12, user_sign);
        }
 
        String user_education = entity.getUser_education();
        if (user_education != null) {
            stmt.bindString(13, user_education);
        }
 
        String user_department = entity.getUser_department();
        if (user_department != null) {
            stmt.bindString(14, user_department);
        }
 
        String user_locality = entity.getUser_locality();
        if (user_locality != null) {
            stmt.bindString(15, user_locality);
        }
 
        String user_school = entity.getUser_school();
        if (user_school != null) {
            stmt.bindString(16, user_school);
        }
 
        String user_state = entity.getUser_state();
        if (user_state != null) {
            stmt.bindString(17, user_state);
        }
 
        String user_registerDate = entity.getUser_registerDate();
        if (user_registerDate != null) {
            stmt.bindString(18, user_registerDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbBean entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        Integer user_ID = entity.getUser_ID();
        if (user_ID != null) {
            stmt.bindLong(2, user_ID);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(3, user_phone);
        }
 
        String user_uuid = entity.getUser_uuid();
        if (user_uuid != null) {
            stmt.bindString(4, user_uuid);
        }
 
        String student_ID = entity.getStudent_ID();
        if (student_ID != null) {
            stmt.bindString(5, student_ID);
        }
 
        String user_icon = entity.getUser_icon();
        if (user_icon != null) {
            stmt.bindString(6, user_icon);
        }
 
        String user_nickname = entity.getUser_nickname();
        if (user_nickname != null) {
            stmt.bindString(7, user_nickname);
        }
 
        String user_sex = entity.getUser_sex();
        if (user_sex != null) {
            stmt.bindString(8, user_sex);
        }
 
        java.util.Date user_birthday = entity.getUser_birthday();
        if (user_birthday != null) {
            stmt.bindLong(9, user_birthday.getTime());
        }
 
        String user_star = entity.getUser_star();
        if (user_star != null) {
            stmt.bindString(10, user_star);
        }
 
        Integer user_height = entity.getUser_height();
        if (user_height != null) {
            stmt.bindLong(11, user_height);
        }
 
        String user_sign = entity.getUser_sign();
        if (user_sign != null) {
            stmt.bindString(12, user_sign);
        }
 
        String user_education = entity.getUser_education();
        if (user_education != null) {
            stmt.bindString(13, user_education);
        }
 
        String user_department = entity.getUser_department();
        if (user_department != null) {
            stmt.bindString(14, user_department);
        }
 
        String user_locality = entity.getUser_locality();
        if (user_locality != null) {
            stmt.bindString(15, user_locality);
        }
 
        String user_school = entity.getUser_school();
        if (user_school != null) {
            stmt.bindString(16, user_school);
        }
 
        String user_state = entity.getUser_state();
        if (user_state != null) {
            stmt.bindString(17, user_state);
        }
 
        String user_registerDate = entity.getUser_registerDate();
        if (user_registerDate != null) {
            stmt.bindString(18, user_registerDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbBean readEntity(Cursor cursor, int offset) {
        DbBean entity = new DbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // user_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_uuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // student_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_nickname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_sex
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // user_birthday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_star
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // user_height
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_sign
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // user_education
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // user_department
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // user_locality
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // user_school
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // user_state
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // user_registerDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbBean entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_ID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUser_phone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_uuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStudent_ID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_icon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_nickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_sex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_birthday(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUser_star(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser_height(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUser_sign(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUser_education(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUser_department(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUser_locality(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUser_school(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUser_state(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUser_registerDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbBean entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbBean entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbBean entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
