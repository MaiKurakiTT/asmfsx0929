package com.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hsd.asmfsx.db.DbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_BEAN".
*/
public class DbBeanDao extends AbstractDao<DbBean, Long> {

    public static final String TABLENAME = "DB_BEAN";

    /**
     * Properties of entity DbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "userID", false, "USER_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property StudentID = new Property(3, String.class, "studentID", false, "STUDENT_ID");
        public final static Property Icon = new Property(4, String.class, "icon", false, "ICON");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property Sex = new Property(6, int.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(7, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Star = new Property(8, String.class, "star", false, "STAR");
        public final static Property Height = new Property(9, Integer.class, "height", false, "HEIGHT");
        public final static Property Sign = new Property(10, String.class, "sign", false, "SIGN");
        public final static Property Education = new Property(11, String.class, "education", false, "EDUCATION");
        public final static Property Department = new Property(12, String.class, "department", false, "DEPARTMENT");
        public final static Property Locality = new Property(13, String.class, "locality", false, "LOCALITY");
        public final static Property School = new Property(14, int.class, "school", false, "SCHOOL");
        public final static Property State = new Property(15, int.class, "state", false, "STATE");
        public final static Property User_registerDate = new Property(16, java.util.Date.class, "user_registerDate", false, "USER_REGISTER_DATE");
    }


    public DbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbId
                "\"USER_ID\" INTEGER," + // 1: userID
                "\"PHONE\" TEXT," + // 2: phone
                "\"STUDENT_ID\" TEXT," + // 3: studentID
                "\"ICON\" TEXT," + // 4: icon
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"SEX\" INTEGER NOT NULL ," + // 6: sex
                "\"BIRTHDAY\" INTEGER," + // 7: birthday
                "\"STAR\" TEXT," + // 8: star
                "\"HEIGHT\" INTEGER," + // 9: height
                "\"SIGN\" TEXT," + // 10: sign
                "\"EDUCATION\" TEXT," + // 11: education
                "\"DEPARTMENT\" TEXT," + // 12: department
                "\"LOCALITY\" TEXT," + // 13: locality
                "\"SCHOOL\" INTEGER NOT NULL ," + // 14: school
                "\"STATE\" INTEGER NOT NULL ," + // 15: state
                "\"USER_REGISTER_DATE\" INTEGER);"); // 16: user_registerDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbBean entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(2, userID);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String studentID = entity.getStudentID();
        if (studentID != null) {
            stmt.bindString(4, studentID);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(5, icon);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
        stmt.bindLong(7, entity.getSex());
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(8, birthday.getTime());
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(9, star);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(10, height);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(11, sign);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(12, education);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(13, department);
        }
 
        String locality = entity.getLocality();
        if (locality != null) {
            stmt.bindString(14, locality);
        }
        stmt.bindLong(15, entity.getSchool());
        stmt.bindLong(16, entity.getState());
 
        java.util.Date user_registerDate = entity.getUser_registerDate();
        if (user_registerDate != null) {
            stmt.bindLong(17, user_registerDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbBean entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(2, userID);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String studentID = entity.getStudentID();
        if (studentID != null) {
            stmt.bindString(4, studentID);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(5, icon);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
        stmt.bindLong(7, entity.getSex());
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(8, birthday.getTime());
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(9, star);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(10, height);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(11, sign);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(12, education);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(13, department);
        }
 
        String locality = entity.getLocality();
        if (locality != null) {
            stmt.bindString(14, locality);
        }
        stmt.bindLong(15, entity.getSchool());
        stmt.bindLong(16, entity.getState());
 
        java.util.Date user_registerDate = entity.getUser_registerDate();
        if (user_registerDate != null) {
            stmt.bindLong(17, user_registerDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbBean readEntity(Cursor cursor, int offset) {
        DbBean entity = new DbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // studentID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // icon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // birthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // star
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // height
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sign
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // education
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // department
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // locality
            cursor.getInt(offset + 14), // school
            cursor.getInt(offset + 15), // state
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)) // user_registerDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbBean entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStudentID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.getInt(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setStar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHeight(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSign(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEducation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDepartment(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLocality(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSchool(cursor.getInt(offset + 14));
        entity.setState(cursor.getInt(offset + 15));
        entity.setUser_registerDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbBean entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbBean entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbBean entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
